name: Linux cpp build
run-name: ${{ github.actor }} Linux cpp build
on:
  workflow_dispatch:
  pull_request:
jobs:
  linux_cpp_test:
    runs-on: ubuntu-latest # the host runner

    container:
      image: ubuntu:22.04 # or whatever tool-chain you need
      options: --user 0 # let apt use root

    services:
      lmaster: # you choose the alias
        image: registry.cn-shanghai.aliyuncs.com/lebai/l-master:3.1.6
        # Important: the service must **keep a foreground process alive**.
        # If that image relies on systemd, create a tiny wrapper script in
        # the image that starts nginx + your daemons and then `tail -f /dev/null`,
        # or override the entry-point here:
        # options: --entrypoint "/start-all.sh"

        # optional: wait until the service is healthy before running steps
        options: >-
          --health-cmd="curl -f http://localhost:8080 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4 # runs **inside the Ubuntu 22.04 container**

      - name: Install build tooling
        run: |
          apt-get update
          apt-get install -y build-essential doxygen graphviz python3-pip python3-dev git

      - name: Install Python deps
        run: pip3 install -r requirements.txt

      - name: Configure
        run: |
          LM_IP=$(getent hosts lmaster | awk '{print $1}')
          echo "LM_IP: $LM_IP"
          cmake -S. -Bbuild \
            -DBUILD_TESTING=ON \
            -DTEST_ROBOT_IP=$LM_IP

      - name: Build
        run: cmake --build build

      - name: Run tests
        run: cmake --build build --target test

  linux_cpp_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies from apt-get
        run: sudo apt-get install -y build-essential doxygen graphviz python3-pip python3-dev

      - name: Install dependencies from pip
        run: |
          pip3 install -r requirements.txt
          pip3 install clang-format==18.1.8

      - name: Configure
        run: cmake -S. -Bbuild -DBUILD_DEB=ON -DCLANG_FORMAT_CHECK=ON

      - name: Build and pack
        run: |
          cmake --build build
          cd build && cpack && cd ..
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        id: artifact
        with:
          name: lebai-linux-x64-deb
          path: build/*.deb
