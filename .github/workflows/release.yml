name: release
run-name: ${{ github.actor }} release
on: 
  workflow_dispatch: 
  # push:
  #  tags:
  #   - v1.*.*
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: read

jobs: 
  build: 
    strategy:
     matrix:
      py-version: [ 3.11 ]
      os-version: [ ubuntu-latest ]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ${{ matrix.os-version }}
    steps: 
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: check python version
        uses: actions/setup-python@v4.3.0
        with: 
         python-version: ${{ matrix.py-version }}

      - name: install component
        run: sudo apt-get install -y build-essential doxygen graphviz python3-pip python3-dev dpkg-dev

      - name: install dependencies
        run: pip3 install -r requirements.txt

      - name: configure
        run: cmake -S. -Bbuild -DBUILD_PYTHON=ON -DBUILD_DEB=ON -DBUILD_DOCUMENTATION=ON

      - name: build
        run: cmake --build build
        
      - name: Setup Pages
        uses: actions/configure-pages@v2
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: './build/html'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        
      # - name: upload .whl
      #   uses: actions/upload-artifact@v3
      #   with: 
      #    name: WheelForPython
      #    path: ./build/python/dist/*.whl

      - name: build deb pack
        run: cpack --config ./build/CPackConfig.cmake

      - name: upload .deb
        uses: actions/upload-artifact@v3
        with:
         name: DebForCPP
         path: ./*.deb
         
  pypi: 
     runs-on: ubuntu-latest
     container: quay.io/pypa/manylinux2010_x86_64
     steps:
       - name: Checkout
         uses: actions/checkout@v1
         
       - run: for PYBIN in /opt/python/*/bin;do "${PYBIN}/pip" install -r requirements.txt; done;
       - run: /opt/python/cp310-cp310/bin/pip install twine==2.0.0

       - name: configure
         run: cmake -S. -Bbuild -DBUILD_PYTHON=ON

       - name: build
         run: cmake --build build

       - name: create-whl-dir
         run: mkdir -p whl

       - name: build with python
         run: for PY in /opt/python/*;do
          rm -rf build;
          cmake -S. -Bbuild -DBUILD_PYTHON=ON -DPYTHONPATH=${PY};
          cmake --build build;
          cp build/python/dist/*.whl whl/;
          done;
         
       - name: repair
         run: for PYWHL in whl/*.whl;do
          auditwheel repair ${PYWHL};
          done;
          
       - name: upload Pypi
         run: /opt/python/cp310-cp310/bin/twine upload -u ${{ secrets.USRNAME }} -p ${{ secrets.PASSWD }} wheelhouse/*.whl
  
  test:
   needs: build
   runs-on: ubuntu-latest
   container: registry.cn-shanghai.aliyuncs.com/lebai/l-master:latest
   steps: 
     - name: start nginx
       run: nginx
      
     - name: start daemon
       run: |
        systemctl start l-master-rc
        systemctl start l-master-ds
       
     - name: Checkout
       uses: actions/checkout@v3

     - name: install component
       run: apt-get install -y build-essential doxygen graphviz python3-pip python3-dev

     - name: install dependencies
       run: pip3 install -r requirements.txt

     - name: configure
       run: cmake -S. -Bbuild -DBUILD_TESTING=ON

     - name: build
       run: cmake --build build
       
     - name: test
       run: cmake --build build --target test

  nuget: 
     strategy:
      matrix:
       os: [ubuntu-latest]
     runs-on: ${{ matrix.os }}
     steps:
       - name: Checkout
         uses: actions/checkout@v1
         
       - name: Setup .NET Core SDK
         uses: actions/setup-dotnet@v3.0.3
         
       - name: Setup Python
         uses: actions/setup-python@v4.4.0
       
       - name: install dependencies
         if: ${{matrix.os == 'ubuntu-latest' }}
         run: |
          sudo apt install build-essential python3-pip dpkg-dev
          sudo apt install build-essential python3-pip dpkg-dev

       - run: pip install -r requirements.txt

       - name: configure
         run: cmake -S. -Bbuild -DBUILD_DOTNET=ON

       - name: build
         run: cmake --build build
          
       - name: upload Nuget
         run: |
          cd ./build/dotnet/packages;
          dotnet nuget push lebai.1.0.*.nupkg --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json